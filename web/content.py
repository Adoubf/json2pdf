"""
界面内容模块
存储界面的文字说明和帮助信息
"""


def get_usage_guide():
    """获取使用说明的Markdown内容"""
    return """
    ## 📖 使用说明
    1. **上传JSON/JSONL文件**: 点击"上传JSON/JSONL文件"按钮选择你的数据文件
    2. **修复格式**: 如果文件格式不规范，勾选"修复JSON文件格式"选项
       - 小文件(≤10MB): 修复后自动存储在内存中，无需输出路径
       - 大文件(>10MB): 需要指定修复文件的输出路径
    3. **选择字段**: 上传文件后会自动显示可选字段，选择需要提取的字段
    4. **设置输出**: 指定PDF文件的输出路径
    5. **调整Batch Size**: 根据需要调整每个PDF文件包含的记录数量
    6. **自定义标记**: 可以自定义记录之间的分隔符号，如 "----"、"==="、"***" 等
    7. **开始处理**: 点击"开始处理"按钮生成PDF文件
    
    ## 📝 支持的文件格式
    
    ### JSON格式 (.json)
    ```json
    [
      {"question": "问题1", "answer": "答案1"},
      {"question": "问题2", "answer": "答案2"}
    ]
    ```
    
    ### JSONL格式 (.jsonl)
    ```jsonl
    {"question": "问题1", "answer": "答案1"}
    {"question": "问题2", "answer": "答案2"}
    ```
    
    ## 📝 注意事项
    - 支持JSON和JSONL两种格式的数据文件
    - 支持多字段提取，每个字段会在PDF中单独显示
    - 输出路径如果不存在会自动创建
    - 生成的PDF文件会按照时间戳命名
    - 标记符号可以是任何字符串，用于在PDF中分隔每条记录
    - JSONL文件会自动转换为JSON格式进行处理
    
    ## 🔧 JSON/JSONL修复功能
    - **自动识别**: 智能识别JSON和JSONL文件格式
    - **格式转换**: 支持JSONL到JSON的自动转换
    - **自动优化**: 小文件修复后直接存储在内存中，提高处理速度
    - **大文件处理**: 大文件修复后输出到指定路径，避免内存溢出
    - **智能判断**: 自动检测文件是否需要修复，无需修复则直接处理
    - **默认路径**: 不指定修复输出路径时，默认保存到PDF输出目录
    
    ## 🎨 标记符号示例
    - `----` (默认): 简单横线分隔
    - `===`: 双线分隔
    - `***`: 星号分隔
    - `━━━━━━`: Unicode线条
    - `◆◆◆`: 装饰性符号
    - `[记录分隔]`: 文字标记
    """


def get_app_title():
    """获取应用标题"""
    return "# 📄 JSON数据处理工具"


def get_app_description():
    """获取应用描述"""
    return "从JSON/JSONL文件中提取指定字段的数据并格式化渲染为PDF"
